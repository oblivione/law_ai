version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: legal_ai_postgres
    environment:
      POSTGRES_DB: legal_ai
      POSTGRES_USER: legal_ai_user
      POSTGRES_PASSWORD: legal_ai_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U legal_ai_user -d legal_ai"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - legal_ai_network

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: legal_ai_redis
    command: redis-server --requirepass legal_ai_redis_password
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - legal_ai_network

  # ChromaDB Vector Database
  chromadb:
    image: chromadb/chroma:latest
    container_name: legal_ai_chromadb
    environment:
      - CHROMA_HOST_PORT=8001
      - CHROMA_HOST_ADDR=0.0.0.0
    ports:
      - "8001:8001"
    volumes:
      - chroma_data:/chroma/chroma
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/api/v1/heartbeat"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - legal_ai_network

  # FastAPI Backend
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    container_name: legal_ai_backend
    environment:
      - DATABASE_URL=postgresql://legal_ai_user:legal_ai_password@postgres:5432/legal_ai
      - REDIS_URL=redis://:legal_ai_redis_password@redis:6379
      - CHROMA_HOST=chromadb
      - CHROMA_PORT=8001
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - OPENROUTER_BASE_URL=${OPENROUTER_BASE_URL:-https://openrouter.ai/api/v1}
      - DOCUMENT_ANALYSIS_MODEL=${DOCUMENT_ANALYSIS_MODEL:-anthropic/claude-3-sonnet}
      - LEGAL_REASONING_MODEL=${LEGAL_REASONING_MODEL:-anthropic/claude-3-opus}
      - EMBEDDING_MODEL=${EMBEDDING_MODEL:-sentence-transformers/all-MiniLM-L6-v2}
      - MAX_FILE_SIZE_MB=${MAX_FILE_SIZE_MB:-50}
      - CHUNK_SIZE=${CHUNK_SIZE:-1000}
      - CHUNK_OVERLAP=${CHUNK_OVERLAP:-200}
      - ENABLE_AI_ANALYSIS=${ENABLE_AI_ANALYSIS:-true}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    ports:
      - "8000:8000"
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      chromadb:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - legal_ai_network
    restart: unless-stopped

  # React Frontend
  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
      args:
        - REACT_APP_API_URL=${REACT_APP_API_URL:-http://localhost:8000}
    container_name: legal_ai_frontend
    ports:
      - "3000:80"
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - legal_ai_network
    restart: unless-stopped

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: legal_ai_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend
    networks:
      - legal_ai_network
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  chroma_data:
    driver: local

networks:
  legal_ai_network:
    driver: bridge

# Development override
# Use: docker-compose -f docker-compose.yml -f docker-compose.dev.yml up
---
# docker-compose.dev.yml
version: '3.8'

services:
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile.dev
    environment:
      - ENVIRONMENT=development
      - DEBUG=true
      - RELOAD=true
    volumes:
      - ./backend:/app
      - ./pdf:/app/pdf
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile.dev
    volumes:
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
    environment:
      - NODE_ENV=development
      - REACT_APP_API_URL=http://localhost:8000
    command: npm start

  # Development database with exposed ports
  postgres:
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=legal_ai_dev

  # pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: legal_ai_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@legal-ai.com
      PGADMIN_DEFAULT_PASSWORD: admin_password
    ports:
      - "8080:80"
    depends_on:
      - postgres
    networks:
      - legal_ai_network
    profiles:
      - development 